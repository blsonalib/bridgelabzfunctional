package com.bridgelabz.datastructure;
 class Node 
{
	 private int data;
	 private Node next;
	        Node( data2) 
	        {
	        	data = data2; 
	        	next = null;
	       	} 
	        public void add(next)
			{
				/
				 * creates an new node with data traverse list till last adds the node as the
				 * last node
				 */
				Node n = new Node(data);
				if (head == null) {
					head = n;
					size++;
				} else {
					Node node = head;
					while (node.next != null) {
						node = node.next;
					}
					// adds the node as last node
					node.next = n;
					size++;
				}
			}

			/**
			 * Function to remove the item from the list
			 * 
			 * @param item
			 */
			public void remove( item) {
				Node n = head;
				Node prev = null;
				if (head.data.equals(item)) {
					head = head.next;
					size -= 1;
					return;
				}
				while (!n.data.equals(item)) {
					prev = n;
					n = n.next;
				}
				n = n.next;
				prev.next = n;
				n = null;
				size -= 1;
			}

			
			/**
			 * function to search the item in the list
			 * 
			 * @param item the item to be searched
			 * @return true if found and false if not found
			 */
			public boolean search(item) {
				Node n = head;
				while (n.next != null) {
					if (n.data.equals(item)) {
						return true;
					}
					n = n.next;
				}
				return false;
			}

			/**
			 * function to check if the list is empty or not
			 * 
			 * @return true if empty and false if not empty
			 */
			public boolean isEmpty() {
				if (head == null) {
					return true;
				}
				return false;
			}

			/**
			 * Funtion to check the size of list and return it
			 * 
			 * @return the size of the list
			 */
			public int size() {
				return size;
			}

			/**
			 * Function to return the index of the item assuming it is present
			 * 
			 * @param item the item to return the index of
			 * @return the index of the passed item
			 */
			public int index(T item) {
				int index = 0;
				Node n = head;
				while (!n.data.equals(item)) {
					n = n.next;
					index++;
				}
				return index;

			}

			
			public void insert(int pos, T item) throws IndexOutOfBoundsException {
				if (pos > size || pos < 0) {
					throw new IndexOutOfBoundsException();
				}
				int index = 0;
				Node n = head;
				Node node = new Node(item);
				if (pos == 0) {
					node.next = head;
					head = node;
				} else {
					while (index != pos) {
						n = n.next;
					}
					node.next = n.next;
					n.next = node;
				}
				size++;
			}

			
			public T pop() {
				Node n = head;
				if (size == 1) {
					head = head.next;
					size--;
					return (T) n.data;
				}
				while (n.next != null) {
					n = n.next;
				}
				T ret = (T) n.data;
				n = n.next;
				size -= 1;
				return ret;
			}

	  
	    
	    } 
	}
